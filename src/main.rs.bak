use reqwest;
use hyper::service::{make_service_fn, service_fn};
use hyper::{Body, Client, Request, Response, Server};
use std::convert::Infallible;
use std::net::SocketAddr;
use url::Url;

mod pac_utils;
use crate::pac_utils::PAC_UTILS;

fn print_type_of<T>(_: &T) {
    println!("{}", std::any::type_name::<T>())
}

const URL: &str = "https://gist.githubusercontent.com/jupierce/f0f2cd8721c3fa4fbf08451e1003a6e6/raw/9b1ff480e17ac5b56c8b1c6d746d1372069b50b3/proxy.pac";

async fn download_pac() -> Result<String, Box<dyn std::error::Error>> {
  let response = reqwest::get(URL).await?;
  let body = response.bytes().await?;
  let content = String::from_utf8(body.to_vec())?;
  Ok(content)
}

#[tokio::main]
async fn main() {
  // Initialize V8.
  let platform = v8::new_default_platform(0, false).make_shared();
  v8::V8::initialize_platform(platform);
  v8::V8::initialize();

  // Create a new Isolate and make it the current one.
  let isolate = &mut v8::Isolate::new(v8::CreateParams::default());

  // Create a stack-allocated handle scope.
  let handle_scope = &mut v8::HandleScope::new(isolate);

  // Create a new context.
  let context = v8::Context::new(handle_scope);

  // Enter the context for compiling and running the hello world script.
  let mut scope = &mut v8::ContextScope::new(handle_scope, context);

  let pac_content = download_pac().await.expect("Error while downloading PAC");

  let source = format!("{}\n{}", PAC_UTILS, pac_content);

  // Create a string containing the JavaScript source code.
  let code = v8::String::new(scope, &source).unwrap();

  // Compile the source code.
  let script = v8::Script::compile(scope, code, None).unwrap();
  // Run the script to get the result.
  let _ = script.run(scope).unwrap();

  let f_name = v8::String::new(scope, "FindProxyForURL").unwrap();

  let global = context.global(&mut scope);
  let process_fn = global
      .get(&mut scope, f_name.into())
      .unwrap();

  let func = v8::Local::<v8::Function>::try_from(process_fn)
      .expect("function expected");

  if !func.is_function() {
    panic!("'FindProxyForURL' is not a function");
  }


  // create Proxy
  let addr = SocketAddr::from(([127, 0, 0, 1], 8888));

  // Create a hyper server and define the request handler
  let make_svc = make_service_fn(|_conn| {
    async {
      Ok::<_, Infallible>(service_fn(handle_request))
    }
  });

  // Start the server
  let server = Server::bind(&addr).serve(make_svc);
    
  println!("Proxy server started on http://{}", addr);
    
  if let Err(e) = server.await {
    eprintln!("Server error: {}", e);
  }

  let url = String::from("https://google.com/");
  let host = String::from("google.com");
  let r = pac_find(&func, scope, &global, &url, &host);
  println!("r2: {}", r);

}

fn pac_find(func: &v8::Function, scope: &mut v8::HandleScope, global: &v8::Local<v8::Object>, url: &String, host: &String) -> String {
  let url_v8 = v8::String::new(scope, url).unwrap();
  let host_v8 = v8::String::new(scope, host).unwrap();
  let result = func.call(scope, (*global).into(), &[url_v8.into(), host_v8.into()]).unwrap();
  let result = result.to_string(scope).unwrap();

  result.to_rust_string_lossy(scope)
}

fn get_url(req: &hyper::Request) -> Result<String, String>{
  // Get the request URL as a string
  let url_string = req.uri().to_string();
    
  // Parse the URL using the `url` crate
  if let Ok(url) = Url::parse(&url_string) {
    // Get the URL without the path and query
    let base_url = url.origin().ascii_serialization();
        
    println!("Base URL: {}", base_url);
    base_url
  } else {
    println!("Invalid URL");
    "Invalid URL"
  }
}

// Function to handle incoming client requests
async fn handle_request(req: Request<Body>) -> Result<Response<Body>, hyper::Error> {
    let client = Client::new();
 
    let url = get_url(&req).expect("Error getting url from request");
    let host = req.uri().host();
    let r = pac_find(&func, scope, &global, &url, &host);
    println!("r2: {}", r);

    // Modify the request to change the destination
    let modified_request = Request::builder()
        .method(req.method().clone())
        .uri(format!("http://127.0.0.1:8080{}", req.uri()))
        .version(req.version())
        .headers(req.headers().clone())
        .body(req.into_body())
        .unwrap();
    
    // Send the modified request to the destination server and get the response
    let res = client.request(modified_request).await?;
    
    Ok(res)
}
